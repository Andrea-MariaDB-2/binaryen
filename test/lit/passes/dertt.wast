;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: wasm-opt %s --dertt -all -S -o - \
;; RUN:   | filecheck %s

;; Test that we can roundtrip struct and array types
(module
  ;; Structs
  ;; CHECK:      (type $struct.A (struct (field i32) (field f32) (field $named f64)))
  (type $struct.A (struct
    i32
    (field f32)
    (field $named f64)
  ))
  ;; CHECK:      (type $struct.B (struct (field i8) (field (mut i16)) (field (ref $struct.A)) (field (mut (ref $struct.A)))))
  (type $struct.B (struct
    (field i8)
    (field (mut i16))
    (field (ref $struct.A))
    (field (mut (ref $struct.A)))
  ))

  ;; Arrays
  ;; CHECK:      (type $vector (array (mut f64)))
  (type $vector (array (mut f64)))

  ;; CHECK:      (func $dynamic-operations
  ;; CHECK-NEXT:  (local $temp.A (ref null $struct.A))
  ;; CHECK-NEXT:  (local $temp.B (ref null $struct.B))
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (ref.test_static $struct.A
  ;; CHECK-NEXT:    (ref.null $struct.A)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (ref.cast_static $struct.A
  ;; CHECK-NEXT:    (ref.null $struct.A)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (block $out-B (result (ref $struct.B))
  ;; CHECK-NEXT:    (local.set $temp.A
  ;; CHECK-NEXT:     (br_on_cast_static $out-B $struct.B
  ;; CHECK-NEXT:      (ref.null $struct.A)
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (block $out-A (result (ref null $struct.A))
  ;; CHECK-NEXT:    (local.set $temp.B
  ;; CHECK-NEXT:     (br_on_cast_static_fail $out-A $struct.B
  ;; CHECK-NEXT:      (ref.null $struct.A)
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $dynamic-operations
    (local $temp.A (ref null $struct.A))
    (local $temp.B (ref null $struct.B))
    (drop
      (ref.test
        (ref.null $struct.A)
        (rtt.canon $struct.A)
      )
    )
    (drop
      (ref.cast
        (ref.null $struct.A)
        (rtt.canon $struct.A)
      )
    )
    (drop
      (block $out-B (result (ref $struct.B))
        (local.set $temp.A
          (br_on_cast $out-B
            (ref.null $struct.A)
            (rtt.canon $struct.B)
          )
        )
        (unreachable)
      )
    )
    (drop
      (block $out-A (result (ref null $struct.A))
        (local.set $temp.B
          (br_on_cast_fail $out-A
            (ref.null $struct.A)
            (rtt.canon $struct.B)
          )
        )
        (unreachable)
      )
    )
  )
  ;; CHECK:      (func $dynamic-constructions
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (struct.new_default $struct.A)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (struct.new $struct.A
  ;; CHECK-NEXT:    (i32.const 1)
  ;; CHECK-NEXT:    (f32.const 2.3450000286102295)
  ;; CHECK-NEXT:    (f64.const 3.14159)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (array.new $vector
  ;; CHECK-NEXT:    (f64.const 3.14159)
  ;; CHECK-NEXT:    (i32.const 3)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (array.new_default $vector
  ;; CHECK-NEXT:    (i32.const 10)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (array.init_static $vector
  ;; CHECK-NEXT:    (f64.const 1)
  ;; CHECK-NEXT:    (f64.const 2)
  ;; CHECK-NEXT:    (f64.const 4)
  ;; CHECK-NEXT:    (f64.const 8)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $dynamic-constructions
    (drop
      (struct.new_default_with_rtt $struct.A
        (rtt.canon $struct.A)
      )
    )
    (drop
      (struct.new_with_rtt $struct.A
        (i32.const 1)
        (f32.const 2.345)
        (f64.const 3.14159)
        (rtt.canon $struct.A)
      )
    )
    (drop
      (array.new_with_rtt $vector
        (f64.const 3.14159)
        (i32.const 3)
        (rtt.canon $vector)
      )
    )
    (drop
      (array.new_default_with_rtt $vector
        (i32.const 10)
        (rtt.canon $vector)
      )
    )
    (drop
      (array.init $vector
        (f64.const 1)
        (f64.const 2)
        (f64.const 4)
        (f64.const 8)
        (rtt.canon $vector)
      )
    )
  )

  ;; CHECK:      (func $static-operations
  ;; CHECK-NEXT:  (local $temp.A (ref null $struct.A))
  ;; CHECK-NEXT:  (local $temp.B (ref null $struct.B))
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (ref.test_static $struct.B
  ;; CHECK-NEXT:    (ref.null $struct.A)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (ref.cast_static $struct.B
  ;; CHECK-NEXT:    (ref.null $struct.A)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (block $out-B (result (ref $struct.B))
  ;; CHECK-NEXT:    (local.set $temp.A
  ;; CHECK-NEXT:     (br_on_cast_static $out-B $struct.B
  ;; CHECK-NEXT:      (ref.null $struct.A)
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (block $out-A (result (ref null $struct.A))
  ;; CHECK-NEXT:    (local.set $temp.B
  ;; CHECK-NEXT:     (br_on_cast_static_fail $out-A $struct.B
  ;; CHECK-NEXT:      (ref.null $struct.A)
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $static-operations
    (local $temp.A (ref null $struct.A))
    (local $temp.B (ref null $struct.B))
    (drop
      (ref.test_static $struct.B (ref.null $struct.A))
    )
    (drop
      (ref.cast_static $struct.B (ref.null $struct.A))
    )
    (drop
      (block $out-B (result (ref $struct.B))
        (local.set $temp.A
          (br_on_cast_static $out-B $struct.B (ref.null $struct.A))
        )
        (unreachable)
      )
    )
    (drop
      (block $out-A (result (ref null $struct.A))
        (local.set $temp.B
          (br_on_cast_static_fail $out-A $struct.B (ref.null $struct.A))
        )
        (unreachable)
      )
    )
  )
  ;; CHECK:      (func $static-constructions
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (struct.new_default $struct.A)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (struct.new $struct.A
  ;; CHECK-NEXT:    (i32.const 1)
  ;; CHECK-NEXT:    (f32.const 2.3450000286102295)
  ;; CHECK-NEXT:    (f64.const 3.14159)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (array.new $vector
  ;; CHECK-NEXT:    (f64.const 3.14159)
  ;; CHECK-NEXT:    (i32.const 3)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (array.new_default $vector
  ;; CHECK-NEXT:    (i32.const 10)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (array.init_static $vector
  ;; CHECK-NEXT:    (f64.const 1)
  ;; CHECK-NEXT:    (f64.const 2)
  ;; CHECK-NEXT:    (f64.const 4)
  ;; CHECK-NEXT:    (f64.const 8)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $static-constructions
    (drop
      (struct.new_default $struct.A)
    )
    (drop
      (struct.new $struct.A
        (i32.const 1)
        (f32.const 2.345)
        (f64.const 3.14159)
      )
    )
    (drop
      (array.new $vector
        (f64.const 3.14159)
        (i32.const 3)
      )
    )
    (drop
      (array.new_default $vector
        (i32.const 10)
      )
    )
    (drop
      (array.init_static $vector
        (f64.const 1)
        (f64.const 2)
        (f64.const 4)
        (f64.const 8)
      )
    )
  )
)
